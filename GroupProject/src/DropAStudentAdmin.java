
import java.util.LinkedList;
import java.util.ListIterator;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;


/**
 *
 * Allows an Admin to drop a student from a course or courses
 */
public class DropAStudentAdmin extends javax.swing.JFrame {

    /**
     * Creates new form DropAStudentAdmin
     */
    public DropAStudentAdmin(LinkedList<Student> student, LinkedList<CurrentCourse> course) {
        initComponents();
        studentList = student;
        listCourse = course;
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        reset();
    }
    
    /**
     * Set adds students from student list to select list
     */
    private void reset()
    {
        ListIterator<Student> iterator = studentList.listIterator();
        DefaultListModel listModel = new DefaultListModel();
        //add students to the list model
        while (iterator.hasNext())
        {
            Student element = iterator.next();
            listModel.addElement(element);
        }
        //set list of students
        selectList.setModel(listModel);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        courseList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        drop = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        dropList = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        selectList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                selectListMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(selectList);

        courseList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                courseListMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(courseList);

        jLabel1.setText("Select Students to Drop");

        jLabel2.setText("Select Course to Drop");

        drop.setText("Drop");
        drop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(dropList);

        jLabel3.setText("Drop Course");

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(drop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clear)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(drop)
                        .addGap(16, 16, 16)
                        .addComponent(clear)
                        .addGap(18, 18, 18)
                        .addComponent(exit)))
                .addGap(23, 23, 23)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Use a drop button to drop student from a course
     * @param evt 
     */
    private void dropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropActionPerformed
         ListModel<CurrentCourse> listModel = dropList.getModel();
         ListModel<Student> listModel2 = selectList.getModel();
         //get student
         int index = selectList.getSelectedIndex();
         //check index number
         if (index != -1)
         {
            Student student = listModel2.getElementAt(index);
            //remove select course in dropList
            for (int a = 0; a < listModel.getSize(); a++)
            {
                CurrentCourse course = listModel.getElementAt(a);
                boolean remove = student.getCurrentSchudule().remove(course);
                //removes course credits from approved credits
                if (remove)
                {
                    student.setCreditHoursEnrolled(student.getCreditHoursEnrolled() - course.getCredits());
                    //drop student from course
                    course.getEnrolledStudents().remove(student);            
                    course.dropStudent();
                }

                //display remove course
                JFrame frame = new JFrame();
                JOptionPane.showMessageDialog(frame, "Course " + course.getName() + " has been removed." );

                Student waitingStudent = course.getWaitingList().pollFirst();
                if (waitingStudent != null)
                {
                    //adds student from waiting list
                    course.getEnrolledStudents().add(waitingStudent);
                    course.addStudent();

                    //makes sure class is not full and student will not go over approved credits
                    int totalCredits = waitingStudent.getCreditHoursEnrolled();
                    totalCredits = totalCredits + course.getCredits();

                    if (totalCredits <= waitingStudent.getApprovedCredits()  && waitingStudent.getHolds() == false)
                    {
                        //adds course to current enrolled list
                        waitingStudent.setCreditHoursEnrolled(totalCredits);
                        waitingStudent.getCurrentSchudule().add(course);
                        frame = new JFrame();
                        JOptionPane.showMessageDialog(frame, waitingStudent.getFirstName() + " " + waitingStudent.getLastName() +
                                "has been added from the waiting list" );
                    }
                }
            }

            reset();
            Backup backup = new Backup();
            backup.backupCourses(listCourse);
            backup.backupStudents(studentList);
        }
    }//GEN-LAST:event_dropActionPerformed

    /**
     * Mouse is released adds student's course list to course list
     * @param evt 
     */
    private void selectListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectListMouseReleased
        //get index of click object
        int index = selectList.getSelectedIndex();
        //check index number
        if (index != -1)
        {
            ListModel<Student> list = selectList.getModel();
            //get student
            Student student = list.getElementAt(index);
            DefaultListModel listModel = new DefaultListModel();
            //get course list for student
            ListIterator<CurrentCourse> iterator = student.getCurrentSchudule().listIterator();

            //adds student's course to list model
            while (iterator.hasNext())
            {
                CurrentCourse element = iterator.next();
                listModel.addElement(element);
            }
            //set the list
            courseList.setModel(listModel);
        }
    }//GEN-LAST:event_selectListMouseReleased
    /**
     * Mouse is released adds a course to drop list
     * @param evt 
     */
    private void courseListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseListMouseReleased
        //get index of click object
        int index = courseList.getSelectedIndex();
        //check index number
         if (index != -1)
         {
            ListModel<CurrentCourse> listModel = courseList.getModel();
            //get course
            CurrentCourse course = listModel.getElementAt(index);
            DefaultListModel dropListModel = new DefaultListModel();
            listModel = dropList.getModel();
            //adds items already in addCourseList to addListModel
            for (int a = 0; a < listModel.getSize(); a++){
                dropListModel.addElement(listModel.getElementAt(a));
            }
            //add course to addCourseList
            dropListModel.addElement(course);
            dropList.setModel(dropListModel);
         }
    }//GEN-LAST:event_courseListMouseReleased
    /**
     * Exits drop a Student Admin
     * @param evt 
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * Clears all list boxes and calls reset
     * @param evt 
     */
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        DefaultListModel listModel = new DefaultListModel();
        listModel.clear();
        courseList.setModel(listModel);
        dropList.setModel(listModel);
        selectList.setModel(listModel);
        reset();
    }//GEN-LAST:event_clearActionPerformed

    private LinkedList<CurrentCourse> listCourse;
    private LinkedList<Student> studentList;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JList courseList;
    private javax.swing.JButton drop;
    private javax.swing.JList dropList;
    private javax.swing.JButton exit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList selectList;
    // End of variables declaration//GEN-END:variables
}
