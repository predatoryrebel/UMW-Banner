import java.util.LinkedList;
import java.util.ListIterator;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *Allows a student to drop course that they are enrolled in
 * @author cjoyner
 */
public class DropClass extends javax.swing.JFrame {

    /**
     * Creates new form DropClass
     */
    public DropClass(Student user, LinkedList<Student> listStudent, LinkedList<CurrentCourse> course, SchedulePanel s) {
        initComponents();
        student = user;
        studentList = listStudent;
        courseList = course;
        scheduleDisplay = s;
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        resetCurrentSchedule();
    }
    
    /**
     * Adds student's course to list box
     */
    private void resetCurrentSchedule()
    {
        DefaultListModel listModel = new DefaultListModel();
        ListIterator<CurrentCourse> iterator = student.getCurrentSchudule().listIterator();
        ///adds courses
        while (iterator.hasNext())
        {
            CurrentCourse course =  iterator.next();
            listModel.addElement(course);
        }
        
        currentList1.setModel(listModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dropList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentList1 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        drop = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        clear = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(dropList);

        jLabel1.setText("Current Schedule");

        currentList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                currentList1MouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(currentList1);

        jLabel2.setText("Drop Course List");

        drop.setText("Drop");
        drop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)))
                .addContainerGap(242, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(drop, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(65, 65, 65)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(242, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(drop)
                .addGap(18, 18, 18)
                .addComponent(clear)
                .addGap(18, 18, 18)
                .addComponent(exit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(74, 74, 74)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(270, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Uses a button to drop a course
     * @param evt 
     */
    private void dropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropActionPerformed
        ListModel<CurrentCourse> listModel = dropList.getModel();
        scheduleDisplay.setSchedule(student, 1);
        //gets all course in drop list box
        for (int a = 0; a < listModel.getSize(); a++)
        {
            CurrentCourse course = listModel.getElementAt(a);
            
            //remove course from student's who are currently enrolled
            boolean remove = student.getCurrentSchudule().remove(course);
            if (remove)
            {
                student.setCreditHoursEnrolled(student.getCreditHoursEnrolled() - course.getCredits());
                //drop student from course
                course.getEnrolledStudents().remove(student);            
                course.dropStudent();
                JFrame frame = new JFrame();
                JOptionPane.showMessageDialog(frame, "Course " + course.getName() + " has been removed." );
            }
            
            Student waitingStudent = course.getWaitingList().pollFirst();
            if (waitingStudent != null)
            {
                //adds student from waiting list
                course.getEnrolledStudents().add(waitingStudent);
                course.addStudent();
                
                //makes sure class is not full and student will not go over approved credits
                int totalCredits = waitingStudent.getCreditHoursEnrolled();
                totalCredits = totalCredits + course.getCredits();
                
                if (totalCredits <= waitingStudent.getApprovedCredits()  && waitingStudent.getHolds() == false)
                {
                    //adds course to current enrolled list
                    waitingStudent.setCreditHoursEnrolled(totalCredits);
                    waitingStudent.getCurrentSchudule().add(course);
                    JFrame frame = new JFrame();
                    JOptionPane.showMessageDialog(frame, waitingStudent.getFirstName() + " " + waitingStudent.getLastName() +
                            "has been added from the waiting list" );
                }
            }
        }
        scheduleDisplay.setSchedule(student, 0);
        
        Backup backup = new Backup();
        backup.backupCourses(courseList);
        backup.backupStudents(studentList);
        clear();
        resetCurrentSchedule();
       
    }//GEN-LAST:event_dropActionPerformed

    /**
     * Mouse is release adds selected course to drop list box
     * @param evt 
     */
    private void currentList1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentList1MouseReleased
        //get index of click object
        int index = currentList1.getSelectedIndex();
         //check index
        if (index != -1)
        {
            ListModel<CurrentCourse> listModel = currentList1.getModel();
            //get course
            CurrentCourse course = listModel.getElementAt(index);
            DefaultListModel dropListModel = new DefaultListModel();
            listModel = dropList.getModel();
            //adds items already in addCourseList to addListModel
            for (int a = 0; a < listModel.getSize(); a++){
                dropListModel.addElement(listModel.getElementAt(a));
            }
            //add course to addCourseList
            dropListModel.addElement(course);
            dropList.setModel(dropListModel);
        }
    }//GEN-LAST:event_currentList1MouseReleased

    /**
     * Exits drop class
     * @param evt 
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * Clears all list boxes, calls reset
     * @param evt 
     */
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        clear();
        resetCurrentSchedule();
    }//GEN-LAST:event_clearActionPerformed

    /**
     * clear all list boxes
     */
    private void clear()
    {
        DefaultListModel listModel = new DefaultListModel();
        listModel.clear();
        currentList1.setModel(listModel);
        dropList.setModel(listModel);
    }
    
    private LinkedList<Student> studentList;
    private LinkedList<CurrentCourse> courseList;
    private Student student;
    private SchedulePanel scheduleDisplay;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JList currentList1;
    private javax.swing.JButton drop;
    private javax.swing.JList dropList;
    private javax.swing.JButton exit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
